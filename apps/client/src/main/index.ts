import Path from 'path';
import {
  app,
  BrowserWindow,
  BrowserWindowConstructorOptions,
  ipcMain,
  screen,
} from 'electron';
import ElekIoCore from 'core';
import express from 'express';
import ProjectService from 'core/dist/esm/service/ProjectService';
import AssetService from 'core/dist/esm/service/AssetService';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export type IpcMainHandler<T> = (
  event: Electron.IpcMainInvokeEvent,
  args: T
) => void;

class Main {
  private readonly expressApp;

  constructor() {
    if (app.isPackaged) {
      this.expressApp = express();
    }

    // Handle creating/removing shortcuts on Windows when installing/uninstalling.
    if (require('electron-squirrel-startup')) {
      app.quit();
    }

    // Register app events
    app.on('ready', this.onReady.bind(this));
    app.on('window-all-closed', this.onWindowAllClosed.bind(this));
    app.on('activate', this.onActivate.bind(this));
  }

  private onWindowAllClosed() {
    // Quit when all windows are closed, except on macOS. There, it's common
    // for applications and their menu bar to stay active until the user quits
    // explicitly with Cmd + Q.
    if (process.platform !== 'darwin') {
      app.quit();
    }
  }

  private async onActivate() {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      await this.createWindow('/projects');
    }
  }

  /**
   * @todo ditch express for local file loading
   */
  private async onReady() {
    // const path = Path.resolve(
    //   __dirname,
    //   '../../app/.webpack/renderer/main_window'
    // );
    // console.log('Dirname: ', __dirname, ' & Path: ', path);
    // console.log('Git Dir: ', process.env.LOCAL_GIT_DIRECTORY);
    if (app.isPackaged && this.expressApp) {
      // Client is in production
      // Serve static files via express on port 3001
      // this.expressApp.use(express.static(path));
      // this.expressApp.use('/projects', (req, res) => {
      //   res.send(`Dirname: ${__dirname} & Path: ${path}`);
      // });
      this.expressApp.use(
        express.static(Path.resolve(__dirname, '../renderer/main_window'))
      );
      this.expressApp.listen(3001);
    }

    const core = await ElekIoCore.init({
      signature: {
        name: 'John Doe',
        email: 'john.doe@example.com',
      },
    });

    await this.registerIpcMain(core);
    const mainWindow = await this.createWindow('/projects');
  }

  /**
   * Figures out where and how to display the window
   *
   * @todo only do this on first start. After that, the user will have adjusted it to his liking.
   * The size, monitor and maybe position should be saved locally and then applied on each start.
   * If the setup changes (display not available anymore or different resolution), default back to this.
   */
  private getWindowSize() {
    const display = screen.getPrimaryDisplay();
    const displaySize = display.workAreaSize;
    const aspectRatioFactor = 16 / 9;

    const windowSize = {
      width: 0,
      height: 0,
    };

    if (displaySize.width >= displaySize.height) {
      // Use 80% of possible height and set width to match 16/9
      windowSize.height = Math.round(displaySize.height * 0.8);
      windowSize.width = Math.round(windowSize.height * aspectRatioFactor);
    } else {
      // Use 80% of possible width and set height to match 16/9
      windowSize.width = Math.round(displaySize.width * 0.8);
      windowSize.height = Math.round(windowSize.width * aspectRatioFactor);
    }

    return windowSize;
  }

  private async createWindow(
    path: string,
    options?: BrowserWindowConstructorOptions
  ) {
    const { width, height } = this.getWindowSize();

    // Set defaults if missing
    const defaults: BrowserWindowConstructorOptions = {
      height,
      width,
    };
    options = Object.assign({}, defaults, options);

    // Overwrite webPreferences
    options.webPreferences = {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    };

    const window = new BrowserWindow(options);

    if (app.isPackaged) {
      // Client is in production
      // Serve static files via express and load them inside the window
      // window.loadURL(Path.join('http://localhost:3001', path));

      // Tries to access
      // file:///Applications/client.app/Contents/Resources/app/.webpack/renderer/main_window
      // which does not exist. Where is the output of the build going to be found?
      // also there is only an empty node_modules folder there, why?
      // where is the output located?

      window.loadFile(Path.join(__dirname, '../../../static', path));
    } else {
      // Client is in development
      // Consume the "next start" endpoint of client-frontend with HMR support
      window.loadURL(Path.join('http://localhost:3002', path));
      // Open DevTools.
      window.webContents.openDevTools();
    }

    return window;
  }

  private async handleIpcMain<T>(channel: string, listener: IpcMainHandler<T>) {
    return ipcMain.handle(channel, listener);
  }

  private async registerIpcMain(core: ElekIoCore) {
    ipcMain.handle('core:projects:count', async (event, args) => {
      return await core.projects.count();
    });
    ipcMain.handle('core:projects:list', async (event, args) => {
      return await core.projects.list();
    });
    ipcMain.handle('core:projects:read', async (event, args) => {
      const [id] = args;
      return await core.projects.read(id);
    });
    ipcMain.handle('core:assets:list', async (event, args) => {
      return await core.assets.list(args.projectId);
    });
    // this.handleIpcMain<Parameters<AssetService['list']>>('core:assets:list', async (event, args) => {
    //   return await core.assets.list(args.projectId);
    // })
  }
}

export default new Main();

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
